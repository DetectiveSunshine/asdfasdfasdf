name: Build and Upload Chromium mini_installer (Windows)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest  # Using the latest Windows runner

    steps:
    - name: Install required tools (git, python, vs, depot_tools)
      run: |
        # Install git if not installed
        if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
          Write-Host "Installing git..."
          choco install -y git
        }
        
        # Install Python if not installed
        if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Python..."
          choco install -y python
        }

        # Install Visual Studio Build Tools if not installed
        $vswherePath = "$env:ProgramFiles(x86)\Microsoft Visual Studio\Installer\vswhere.exe"
        if (-not (Test-Path $vswherePath)) {
          Write-Host "Installing Visual Studio Build Tools..."
          choco install -y visualstudio2022buildtools `
            visualstudio2022-workload-vctools `
            visualstudio2022-workload-nativedesktop
        }

        # Install depot_tools if not present
        if (-not (Test-Path "$env:USERPROFILE\depot_tools")) {
          Write-Host "Cloning depot_tools..."
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git "$env:USERPROFILE\depot_tools"
        }

    - name: Set depot_tools environment
      run: |
        echo "DEPOT_TOOLS_UPDATE=0" >> $env:GITHUB_ENV
        echo "$env:USERPROFILE\depot_tools" >> $env:GITHUB_PATH

    - name: Set environment to prevent toolchain download
      run: |
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" >> $env:GITHUB_ENV

    - name: Fetch Chromium source
      run: |
        if (-not (Test-Path "$env:USERPROFILE\chromium\src")) {
          Write-Host "Fetching Chromium source..."
          mkdir $env:USERPROFILE\chromium
          cd $env:USERPROFILE\chromium
          fetch --nohooks chromium
        }
        
        # Fetch the latest stable tag
        cd $env:USERPROFILE\chromium\src
        git fetch --all
        git fetch --tags
        $latest_stable_tag = git tag -l | Sort-Object | Select-Object -Last 1
        git checkout $latest_stable_tag
        git pull origin $latest_stable_tag

        gclient runhooks

    - name: Configure GN args (mini_installer, official build, -03 optimization, LTO, Google API)
      run: |
        cd $env:USERPROFILE\chromium\src
        gn gen out\Default --args="
          is_debug=false 
          is_clang=true 
          target_cpu=\"x64\" 
          is_official_build=true 
          is_component_build=false 
          enable_nacl=false 
          ffmpeg_branding=\"Chromium\" 
          proprietary_codecs=true 
          use_lto=true 
          lto_type=full 
          optimization_level=3
          use_google_api=true
        "

    - name: Build mini_installer.exe
      run: |
        cd $env:USERPROFILE\chromium\src
        autoninja -C out\Default mini_installer

    - name: Upload mini_installer.exe
      uses: actions/upload-artifact@v4
      with:
        name: chromium-mini-installer
        path: ${{ env.USERPROFILE }}\chromium\src\out\Default\mini_installer.exe
